{"version":3,"sources":["index.js"],"names":["checkLine","line","squares","val","slice","calculateWinState","lines","i","length","winner","winningLine","Square","props","className","highlight","onClick","value","Board","this","highlighted","indexOf","renderSquare","React","Component","Game","state","history","Array","fill","winningLines","xNext","stepNumber","setState","concat","step","map","move","desc","winState","highlightedSquares","jumpTo","status","current","draw","isGameDraw","moves","renderHistory","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f4c7bff.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction checkLine(line, squares) {\n        const val = squares[line[0]];\n        if (val == null) return false;\n        for (const i of line.slice(1)) {\n            if (squares[i] !== val) return false;\n        }\n        return true;\n    }\n\n/**\n * Calculate the winner of the given set of squares given a list of winning lines.\n * @param squares {[]} The grid of squares representing the game board (as a 1d array).\n * @param lines {Number[][]} The winning lines for the given board, a list of lists of numbers,\n * each list of numbers contained represents a win condition.\n * @returns {{winner: *, winningLine: Number[]} | null} If a win condition is met, an object containing winner and winning line is returned.\n * Otherwise returns null.\n */\nfunction calculateWinState(squares, lines) {\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        if (checkLine(line, squares)) {\n            return {\n                winner: squares[line[0]],\n                winningLine: line.slice()\n            };\n        }\n    }\n    return null;\n}\n\nfunction isGameDraw(squares) {\n    for (const square of squares) {\n        if (square == null) return false;\n    }\n    return true;\n}\n\n\nfunction Square(props) {\n    return (\n    <button\n        className={ props.highlight ? \"square highlight\" : \"square\" }\n        onClick={ props.onClick }\n    >\n        {props.value}\n    </button>\n    );\n}\n\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        let highlight;\n        if (this.props.highlighted) {\n            highlight = this.props.highlighted.indexOf(i) !== -1;\n        }\n\n        return <Square\n            highlight={ highlight }\n            value={ this.props.squares[i] }\n            onClick={ () => this.props.onClick(i) }\n        />;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            winningLines: [\n                // Horizontal\n                [0, 1, 2],\n                [3, 4, 5],\n                [6, 7, 8],\n\n                // Vertical\n                [0, 3, 6],\n                [1, 4, 7],\n                [2, 5, 8],\n\n                // Diagonal\n                [0, 4, 8],\n                [6, 4, 2]\n            ],\n            xNext: true,\n            stepNumber: 0,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[this.state.stepNumber];\n        const squares = current.squares.slice();\n        if (calculateWinState(squares, this.state.winningLines) || squares[i]) return;\n\n        const xNext = this.state.xNext;\n        squares[i] = xNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            xNext: !xNext,\n            stepNumber: history.length,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n           stepNumber: step,\n           xNext: (step % 2) === 0,\n        });\n    }\n\n    renderHistory() {\n        const history = this.state.history;\n        return history.map((step, move) => {\n            const desc = 'Go to move #' + move;\n            const squares = history[move].squares;\n\n            let winState = calculateWinState(squares, this.state.winningLines);\n            let highlightedSquares = (winState) ? winState.winningLine.slice(): [];\n            return (\n                <div className=\"move-preview\" key={move}>\n                    <button className=\"move-jump\" onClick={() => this.jumpTo(move)}>{desc}</button>\n                    <Board\n                        squares={ squares }\n                        onClick={ (i) => {} }\n                        highlighted={ highlightedSquares }\n                    />\n                </div>\n            );\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const draw = isGameDraw(current.squares);\n        const winState = calculateWinState(current.squares, this.state.winningLines);\n\n        let status;\n        let highlightedSquares = []\n        if (winState) {\n            status = 'Winner: ' + winState.winner;\n            highlightedSquares = winState.winningLine;\n        } else {\n            if (draw) {\n                status = 'Draw';\n                highlightedSquares = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n            } else {\n                status = 'Next player: ' + (this.state.xNext ? 'X' : 'O');\n            }\n        }\n\n        const moves = this.renderHistory();\n\n        return (\n        <div className=\"game\">\n            <h1 className=\"title\">Tick-Tac-Toe</h1>\n            <div className=\"game-container\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={ current.squares }\n                        onClick={ (i) => this.handleClick(i) }\n                        highlighted={ highlightedSquares }\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"status\">{status}</div>\n                    <div className=\"moves\">\n                        {moves}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}